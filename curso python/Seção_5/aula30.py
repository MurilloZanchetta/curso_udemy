# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

# Criamos uma class Notifica√ß√£o abstrata
class Notificacao(ABC):

    # Fizemos um __init__ com um valor mensagem
    def __init__(self, mensagem):

        # self.mensagem retorna o valor mensagem
        self.mensagem = mensagem

    # fazemos esse @abstractmethod para torna-los abstratos
    @abstractmethod

    #Criamos essa fun√ß√£o para enviar as notifica√ß√µes
    # usamos -> bool para indicar aos devs, que estamos retornando
    # True ou False
    def enviar(self) -> bool: ...

# Criamos  a class NotificacaoEmail com o () retornando =   
# a super classe (Notificacao):
class NotificacaoEmail(Notificacao):

    # usamos -> bool para indicar aos devs, que estamos retornando
    # True ou False
    def enviar(self) -> bool:
        print('E-mail: enviando - ', self.mensagem)

        # Retornamos True pois por padrao est√° em None, ai para n quebrar
        # o c√≥digo, n√≥s retornamos o True
        return True


# Criamos  a class NotificacaoSMS com o () retornando =   
# a super classe (Notificacao):
class NotificacaoSMS(Notificacao):

    # usamos -> bool para indicar aos devs, que estamos retornando
    # True ou False
    def enviar(self) -> bool:
        print('SMS: enviando - ', self.mensagem)

        # Retornamos True pois por padrao est√° em None, ai para n quebrar
        # o c√≥digo, n√≥s retornamos o True
        return True

# Fizemos o Polimorfismo aqui nesta fun√ß√£o...
# criamos o def notificar retornando o valor notifica√ß√£o: Notifica√ß√£o
def notificar(notificacao: Notificacao):

    # Criamos a variavel notificacao_enviada = notificacao.enviar()
    notificacao_enviada = notificacao.enviar()

    # criamos o if para se for True retornar ('Notifica√ß√£o enviada')
    # e o else retorna caso for false
    if notificacao_enviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o N√ÉO enviada')


notificacao_email = NotificacaoEmail('testando e-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('testando SMS')
notificar(notificacao_sms)
